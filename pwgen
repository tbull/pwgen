#!/usr/bin/perl -w

use strict;
use Getopt::Std qw/getopts/;


use vars qw/%opts $DEFAULT_PASSWORD_LENGTH/;

%opts = ();
$DEFAULT_PASSWORD_LENGTH = 10;




###### usage_text()
#
#   Returns a usage text (does not print it). Tries not to exceed an 80 column screen.
#

sub usage_text() {
    return join("\n",
        "Usage: $0 [-s <setname>] [[-l] length]",
        "",
        "Returns a random string made up from a given set of characters,",
        "suitable for use as a password, with a length of 'length' chars,",
        "or $DEFAULT_PASSWORD_LENGTH, if no length is given.",
        "",
        "    -l: Set the password length. Defaults to $DEFAULT_PASSWORD_LENGTH. You may supply",
        "        the password length as an argument rather than as an option.",
        "    -s: Use a named set of characters instead of the default set. ",
        "        Names are: safe, anum, num, alpha, lalpha, ualpha",
        "",
        "It is not defined, which characters the default charset consists of,",
        "i.e. this may change in a future version.",
        "",
        "pwgen (C) Copyright 2003-2012 by Roland Bluethgen (a.k.a. T-Bull) <tbull (at) tbull (dot) org>",
        ""
    );
}




######  main()
#
#

sub main() {
    my (@charset, $length);


    getopts('hs:l:', \%opts);

    print(usage_text()), return 1 unless (@ARGV <= 1);
    print(usage_text()), return 0 if ($opts{'h'});

    # default charset
    @charset = ('0'..'9', 'A'..'Z', '!', '$', '&', '/', ',', '.', '0'..'9', 'a'..'z', '(', ')', '=', '-', '+');

    if ($opts{'s'}) {
        $opts{'s'} = lc($opts{'s'});

        $opts{'s'} eq 'safe' and
            @charset = ('0'..'9', 'A'..'Z', 'a'..'z', ',', '.') or
        $opts{'s'} eq 'anum' and
            @charset = ('0'..'9', 'A'..'Z', 'a'..'z') or
        $opts{'s'} eq 'num' and
            @charset = ('0'..'9') or
        $opts{'s'} eq 'alpha' and
            @charset = ('A'..'Z', 'a'..'z') or
        $opts{'s'} eq 'lalpha' and
            @charset = ('a'..'z') or
        $opts{'s'} eq 'ualpha' and
            @charset = ('A'..'Z') or
        print STDERR "Unknown character set name, using default set.\n";
    }


    $length = $opts{'l'} || $ARGV[0] || $DEFAULT_PASSWORD_LENGTH;
    # force numeric comparision to rule out alphabetic $length, which would result in an $UINT_MAX long password
    $length = $DEFAULT_PASSWORD_LENGTH if ($length == 0);


    print($charset[int(rand(scalar(@charset)))]) while($length--);
    print("\n");
}


exit(main());

